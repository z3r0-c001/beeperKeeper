apiVersion: 1
groups:
- folder: Beeper Keeper
  interval: 1m
  name: BME680 Environmental Alerts
  orgId: 1
  rules:
  - annotations:
      description: 'Temperature is {{ $values.A.Value }}°C (threshold: 35°C). [View Dashboard](https://YOUR_DOMAIN)'
      summary: Temperature is too high
    condition: C
    data:
    - datasourceUid: InfluxDB_Beeper
      model:
        query: "from(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"_field\"] == \"temperature\")\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n"
      refId: A
      relativeTimeRange:
        from: 300
        to: 0
    - datasourceUid: __expr__
      model:
        conditions:
        - evaluator:
            params:
            - 35
            type: gt
          operator:
            type: and
          query:
            params:
            - A
          reducer:
            params: []
            type: last
          type: query
        type: classic_conditions
      refId: C
      relativeTimeRange:
        from: 300
        to: 0
    execErrState: Error
    for: 2m
    labels:
      sensor: BME680
      severity: warning
    noDataState: NoData
    title: High Temperature Alert
    uid: temp_high
  - annotations:
      description: 'Temperature is too low! Current: {{ printf "%.1f" $values.A.Value }}°C. Acceptable range: ≥ 10°C. [View Dashboard](https://YOUR_DOMAIN)'
      summary: Temperature is too low
    condition: C
    data:
    - datasourceUid: InfluxDB_Beeper
      model:
        query: "from(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"_field\"] == \"temperature\")\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n"
      refId: A
      relativeTimeRange:
        from: 300
        to: 0
    - datasourceUid: __expr__
      model:
        conditions:
        - evaluator:
            params:
            - 10
            type: lt
          operator:
            type: and
          query:
            params:
            - A
          reducer:
            params: []
            type: last
          type: query
        type: classic_conditions
      refId: C
      relativeTimeRange:
        from: 300
        to: 0
    execErrState: Error
    for: 2m
    labels:
      sensor: BME680
      severity: warning
    noDataState: NoData
    title: Low Temperature Alert
    uid: temp_low
  - annotations:
      description: 'Humidity is {{ $values.A.Value }}% (threshold: 80%). [View Dashboard](https://YOUR_DOMAIN)'
      summary: Humidity is too high
    condition: C
    data:
    - datasourceUid: InfluxDB_Beeper
      model:
        query: "from(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"_field\"] == \"humidity\")\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n"
      refId: A
      relativeTimeRange:
        from: 300
        to: 0
    - datasourceUid: __expr__
      model:
        conditions:
        - evaluator:
            params:
            - 80
            type: gt
          operator:
            type: and
          query:
            params:
            - A
          reducer:
            params: []
            type: last
          type: query
        type: classic_conditions
      refId: C
      relativeTimeRange:
        from: 300
        to: 0
    execErrState: Error
    for: 5m
    labels:
      sensor: BME680
      severity: warning
    noDataState: NoData
    title: High Humidity Alert
    uid: humidity_high
  - annotations:
      description: 'Humidity is too low! Current: {{ printf "%.1f" $values.A.Value }}%. Acceptable range: ≥ 20%. [View Dashboard](https://YOUR_DOMAIN)'
      summary: Humidity is too low
    condition: C
    data:
    - datasourceUid: InfluxDB_Beeper
      model:
        query: "from(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"_field\"] == \"humidity\")\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n"
      refId: A
      relativeTimeRange:
        from: 300
        to: 0
    - datasourceUid: __expr__
      model:
        conditions:
        - evaluator:
            params:
            - 20
            type: lt
          operator:
            type: and
          query:
            params:
            - A
          reducer:
            params: []
            type: last
          type: query
        type: classic_conditions
      refId: C
      relativeTimeRange:
        from: 300
        to: 0
    execErrState: Error
    for: 5m
    labels:
      sensor: BME680
      severity: info
    noDataState: NoData
    title: Low Humidity Alert
    uid: humidity_low
  - annotations:
      description: 'CPU temperature is {{ $values.A.Value }}°C (threshold: 80°C). [View Dashboard](https://YOUR_DOMAIN)'
      summary: CPU temperature is critical
    condition: C
    data:
    - datasourceUid: InfluxDB_Beeper
      model:
        query: "from(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"_field\"] == \"cpu_temp\")\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n"
      refId: A
      relativeTimeRange:
        from: 300
        to: 0
    - datasourceUid: __expr__
      model:
        conditions:
        - evaluator:
            params:
            - 80
            type: gt
          operator:
            type: and
          query:
            params:
            - A
          reducer:
            params: []
            type: last
          type: query
        type: classic_conditions
      refId: C
      relativeTimeRange:
        from: 300
        to: 0
    execErrState: Error
    for: 1m
    labels:
      sensor: System
      severity: critical
    noDataState: NoData
    title: CPU Temperature Critical
    uid: cpu_temp_critical
  - annotations:
      description: No data from BME680 sensor in the last 10 minutes. Check MQTT publisher and sensor connection. [View Dashboard](https://YOUR_DOMAIN)
      summary: No sensor data received
    condition: C
    data:
    - datasourceUid: InfluxDB_Beeper
      model:
        query: "from(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"_field\"] == \"temperature\")\n  |> count()\n"
      refId: A
      relativeTimeRange:
        from: 600
        to: 0
    - datasourceUid: __expr__
      model:
        conditions:
        - evaluator:
            params:
            - 1
            type: lt
          operator:
            type: and
          query:
            params:
            - A
          reducer:
            params: []
            type: last
          type: query
        type: classic_conditions
      refId: C
      relativeTimeRange:
        from: 600
        to: 0
    execErrState: Error
    for: 10m
    labels:
      sensor: BME680
      severity: critical
    noDataState: Alerting
    title: No Sensor Data Received
    uid: no_sensor_data
  - annotations:
      description: Camera metadata has not been received for 10+ minutes. Check metadata_updater service and camera stream. Light detection alerts will not function until this is resolved. [View Dashboard](https://YOUR_DOMAIN)
      summary: '📷 BEEPER KEEPER: No Camera Metadata Received'
    condition: C
    data:
    - datasourceUid: InfluxDB_Beeper
      model:
        query: "from(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"topic\"] == \"beeper/camera/csi/metadata\")\n  |> filter(fn: (r) => r[\"_field\"] == \"Lux\")\n  |> count()\n"
      refId: A
      relativeTimeRange:
        from: 600
        to: 0
    - datasourceUid: __expr__
      model:
        conditions:
        - evaluator:
            params:
            - 1
            type: lt
          operator:
            type: and
          query:
            params:
            - A
          reducer:
            params: []
            type: last
          type: query
        type: classic_conditions
      refId: C
      relativeTimeRange:
        from: 600
        to: 0
    execErrState: Error
    for: 10m
    labels:
      sensor: Camera
      severity: warning
    noDataState: Alerting
    title: No Camera Metadata Received
    uid: no_camera_metadata
  - annotations:
      description: Light level increased abruptly at a rate of {{ printf "%.1f" $values.A.Value }} lux/sec. This indicates someone turned on a light or opened the door. [View Dashboard](https://YOUR_DOMAIN)
      summary: '💡 BEEPER KEEPER: Coop Light Turned ON (sudden increase detected)'
    condition: C
    data:
    - datasourceUid: InfluxDB_Beeper
      model:
        query: "from(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"topic\"] == \"beeper/camera/csi/metadata\")\n  |> filter(fn: (r) => r[\"_field\"] == \"Lux\")\n  |> aggregateWindow(every: 10s, fn: mean, createEmpty: false)\n  |> derivative(unit: 1s, nonNegative: false)\n"
      refId: A
      relativeTimeRange:
        from: 120
        to: 0
    - datasourceUid: __expr__
      model:
        conditions:
        - evaluator:
            params:
            - 20
            type: gt
          operator:
            type: and
          query:
            params:
            - A
          reducer:
            params: []
            type: last
          type: query
        type: classic_conditions
      refId: C
      relativeTimeRange:
        from: 120
        to: 0
    execErrState: OK
    for: 1s
    labels:
      sensor: Camera
      severity: info
    noDataState: OK
    title: Sudden Light Increase Detected
    uid: light_sudden_increase
  - annotations:
      description: Light level decreased abruptly at a rate of {{ printf "%.1f" $values.A.Value }} lux/sec. This indicates someone turned off a light or closed the door. [View Dashboard](https://YOUR_DOMAIN)
      summary: '🌙 BEEPER KEEPER: Coop Light Turned OFF (sudden decrease detected)'
    condition: C
    data:
    - datasourceUid: InfluxDB_Beeper
      model:
        query: "from(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"topic\"] == \"beeper/camera/csi/metadata\")\n  |> filter(fn: (r) => r[\"_field\"] == \"Lux\")\n  |> aggregateWindow(every: 10s, fn: mean, createEmpty: false)\n  |> derivative(unit: 1s, nonNegative: false)\n"
      refId: A
      relativeTimeRange:
        from: 120
        to: 0
    - datasourceUid: __expr__
      model:
        conditions:
        - evaluator:
            params:
            - -20
            type: lt
          operator:
            type: and
          query:
            params:
            - A
          reducer:
            params: []
            type: last
          type: query
        type: classic_conditions
      refId: C
      relativeTimeRange:
        from: 120
        to: 0
    execErrState: OK
    for: 10s
    labels:
      sensor: Camera
      severity: info
    noDataState: OK
    title: Sudden Light Decrease Detected
    uid: light_sudden_decrease
  - annotations:
      description: 'Air quality has remained poor for 5+ minutes. Current IAQ: {{ $values.A.Value }} (threshold: 150). Ventilation may be needed. [View Dashboard](https://YOUR_DOMAIN)'
      summary: '⚠️ BEEPER KEEPER: Poor Air Quality Sustained (IAQ: {{ printf "%.0f" $values.A.Value }})'
    condition: C
    data:
    - datasourceUid: InfluxDB_Beeper
      model:
        query: "from(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"topic\"] == \"beeper/sensors/bme680/all\")\n  |> filter(fn: (r) => r[\"_field\"] == \"iaq\")\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n"
      refId: A
      relativeTimeRange:
        from: 600
        to: 0
    - datasourceUid: __expr__
      model:
        conditions:
        - evaluator:
            params:
            - 150
            type: gt
          operator:
            type: and
          query:
            params:
            - A
          reducer:
            params: []
            type: last
          type: query
        type: classic_conditions
      refId: C
      relativeTimeRange:
        from: 600
        to: 0
    execErrState: OK
    for: 5m
    labels:
      sensor: BME680
      severity: warning
    noDataState: OK
    title: Air Quality Sustained Poor
    uid: iaq_sustained_poor
  - annotations:
      description: Air quality is degrading rapidly at {{ printf "%.1f" $values.A.Value }} IAQ points per minute. Investigate potential issue. [View Dashboard](https://YOUR_DOMAIN)
      summary: '⚠️ BEEPER KEEPER: Air Quality Rapidly Degrading ({{ printf "%.1f" $values.A.Value }} points/min)'
    condition: C
    data:
    - datasourceUid: InfluxDB_Beeper
      model:
        query: "from(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"topic\"] == \"beeper/sensors/bme680/all\")\n  |> filter(fn: (r) => r[\"_field\"] == \"iaq\")\n  |> aggregateWindow(every: 30s, fn: mean, createEmpty: false)\n  |> derivative(unit: 1m, nonNegative: false)\n"
      refId: A
      relativeTimeRange:
        from: 300
        to: 0
    - datasourceUid: __expr__
      model:
        conditions:
        - evaluator:
            params:
            - 25
            type: gt
          operator:
            type: and
          query:
            params:
            - A
          reducer:
            params: []
            type: last
          type: query
        type: classic_conditions
      refId: C
      relativeTimeRange:
        from: 300
        to: 0
    execErrState: OK
    for: 2m
    labels:
      sensor: BME680
      severity: warning
    noDataState: OK
    title: Air Quality Rapid Degradation
    uid: iaq_rapid_degradation
  - annotations:
      description: 'Air quality has reached Very Poor/Severe levels! Current IAQ: {{ $values.A.Value }} (critical threshold: 200). Immediate action required! [View Dashboard](https://YOUR_DOMAIN)'
      summary: '🚨 BEEPER KEEPER: CRITICAL AIR QUALITY EMERGENCY (IAQ: {{ printf "%.0f" $values.A.Value }})'
    condition: C
    data:
    - datasourceUid: InfluxDB_Beeper
      model:
        query: "from(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"topic\"] == \"beeper/sensors/bme680/all\")\n  |> filter(fn: (r) => r[\"_field\"] == \"iaq\")\n  |> aggregateWindow(every: 10s, fn: mean, createEmpty: false)\n"
      refId: A
      relativeTimeRange:
        from: 120
        to: 0
    - datasourceUid: __expr__
      model:
        conditions:
        - evaluator:
            params:
            - 200
            type: gt
          operator:
            type: and
          query:
            params:
            - A
          reducer:
            params: []
            type: last
          type: query
        type: classic_conditions
      refId: C
      relativeTimeRange:
        from: 120
        to: 0
    execErrState: Error
    for: 30s
    labels:
      sensor: BME680
      severity: critical
    noDataState: OK
    title: Air Quality Critical Emergency
    uid: iaq_critical
  - annotations:
      description: 'CO2 levels are elevated at {{ $values.A.Value }} ppm (threshold: 1200 ppm). Ventilation needed. [View Dashboard](https://YOUR_DOMAIN)'
      summary: '⚠️ BEEPER KEEPER: High CO2 Levels ({{ printf "%.0f" $values.A.Value }} ppm)'
    condition: C
    data:
    - datasourceUid: InfluxDB_Beeper
      model:
        query: "from(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"topic\"] == \"beeper/sensors/bme680/all\")\n  |> filter(fn: (r) => r[\"_field\"] == \"co2_equivalent\")\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n"
      refId: A
      relativeTimeRange:
        from: 300
        to: 0
    - datasourceUid: __expr__
      model:
        conditions:
        - evaluator:
            params:
            - 1200
            type: gt
          operator:
            type: and
          query:
            params:
            - A
          reducer:
            params: []
            type: last
          type: query
        type: classic_conditions
      refId: C
      relativeTimeRange:
        from: 300
        to: 0
    execErrState: OK
    for: 3m
    labels:
      sensor: BME680
      severity: warning
    noDataState: OK
    title: CO2 Levels High
    uid: co2_high
  - annotations:
      description: 'CO2 levels are dangerously high at {{ $values.A.Value }} ppm (critical threshold: 1500 ppm). Immediate ventilation required! [View Dashboard](https://YOUR_DOMAIN)'
      summary: '🚨 BEEPER KEEPER: CRITICAL CO2 LEVELS ({{ printf "%.0f" $values.A.Value }} ppm)'
    condition: C
    data:
    - datasourceUid: InfluxDB_Beeper
      model:
        query: "from(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"topic\"] == \"beeper/sensors/bme680/all\")\n  |> filter(fn: (r) => r[\"_field\"] == \"co2_equivalent\")\n  |> aggregateWindow(every: 30s, fn: mean, createEmpty: false)\n"
      refId: A
      relativeTimeRange:
        from: 180
        to: 0
    - datasourceUid: __expr__
      model:
        conditions:
        - evaluator:
            params:
            - 1500
            type: gt
          operator:
            type: and
          query:
            params:
            - A
          reducer:
            params: []
            type: last
          type: query
        type: classic_conditions
      refId: C
      relativeTimeRange:
        from: 180
        to: 0
    execErrState: Error
    for: 1m
    labels:
      sensor: BME680
      severity: critical
    noDataState: OK
    title: CO2 Levels Critical
    uid: co2_critical
  - annotations:
      description: Audio level at {{ $values.B.Value }} dB indicates excited or communicating chickens (35-45 dB). This is normal active behavior. [View Dashboard](https://YOUR_DOMAIN)
      summary: 'ℹ️ BEEPER KEEPER: Chickens Excited/Communicating ({{ printf "%.0f" $values.B.Value }} dB)'
    condition: C
    data:
    - datasourceUid: InfluxDB_Beeper
      model:
        query: "from(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"topic\"] == \"beeper/audio/level\")\n  |> filter(fn: (r) => r[\"_field\"] == \"level_db\")\n  |> aggregateWindow(every: 10s, fn: mean, createEmpty: false)\n"
      refId: A
      relativeTimeRange:
        from: 60
        to: 0
    - datasourceUid: __expr__
      model:
        expression: A
        reducer: last
        settings:
          mode: dropNN
        type: reduce
      refId: B
      relativeTimeRange:
        from: 60
        to: 0
    - datasourceUid: __expr__
      model:
        conditions:
        - evaluator:
            params:
            - 35
            - 45
            type: within_range
        expression: B
        type: threshold
      refId: C
      relativeTimeRange:
        from: 60
        to: 0
    execErrState: OK
    for: 30s
    labels:
      sensor: Microphone
      severity: info
    noDataState: OK
    title: Chickens Excited/Communicating
    uid: audio_excited
  - annotations:
      description: Audio level at {{ $values.B.Value }} dB indicates mild alerting behavior (46-55 dB). Chickens may be mildly disturbed or alerting to something. [View Dashboard](https://YOUR_DOMAIN)
      summary: 'ℹ️ BEEPER KEEPER: Mild Alerting ({{ printf "%.0f" $values.B.Value }} dB)'
    condition: C
    data:
    - datasourceUid: InfluxDB_Beeper
      model:
        query: "from(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"topic\"] == \"beeper/audio/level\")\n  |> filter(fn: (r) => r[\"_field\"] == \"level_db\")\n  |> aggregateWindow(every: 10s, fn: mean, createEmpty: false)\n"
      refId: A
      relativeTimeRange:
        from: 60
        to: 0
    - datasourceUid: __expr__
      model:
        expression: A
        reducer: last
        settings:
          mode: dropNN
        type: reduce
      refId: B
      relativeTimeRange:
        from: 60
        to: 0
    - datasourceUid: __expr__
      model:
        conditions:
        - evaluator:
            params:
            - 46
            - 55
            type: within_range
        expression: B
        type: threshold
      refId: C
      relativeTimeRange:
        from: 60
        to: 0
    execErrState: OK
    for: 20s
    labels:
      sensor: Microphone
      severity: info
    noDataState: OK
    title: Mild Alerting Behavior
    uid: audio_mild_alert
  - annotations:
      description: Audio level at {{ $values.B.Value }} dB indicates alerting behavior (56-70 dB). Chickens are alarmed or distressed. Check for predators or disturbances. [View Dashboard](https://YOUR_DOMAIN)
      summary: '⚠️ BEEPER KEEPER: Chickens Alerting ({{ printf "%.0f" $values.B.Value }} dB)'
    condition: C
    data:
    - datasourceUid: InfluxDB_Beeper
      model:
        query: "from(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"topic\"] == \"beeper/audio/level\")\n  |> filter(fn: (r) => r[\"_field\"] == \"level_db\")\n  |> aggregateWindow(every: 10s, fn: mean, createEmpty: false)\n"
      refId: A
      relativeTimeRange:
        from: 60
        to: 0
    - datasourceUid: __expr__
      model:
        expression: A
        reducer: last
        settings:
          mode: dropNN
        type: reduce
      refId: B
      relativeTimeRange:
        from: 60
        to: 0
    - datasourceUid: __expr__
      model:
        conditions:
        - evaluator:
            params:
            - 56
            - 70
            type: within_range
        expression: B
        type: threshold
      refId: C
      relativeTimeRange:
        from: 60
        to: 0
    execErrState: OK
    for: 15s
    labels:
      sensor: Microphone
      severity: warning
    noDataState: OK
    title: Chickens Alerting
    uid: audio_alerting
  - annotations:
      description: 'CRITICAL: Audio level at {{ $values.B.Value }} dB indicates a serious problem (70+ dB). Extreme distress, predator attack, or emergency situation. Immediate attention required! [View Dashboard](https://YOUR_DOMAIN)'
      summary: '🚨 BEEPER KEEPER: PROBLEM - Very Loud Noise ({{ printf "%.0f" $values.B.Value }} dB)'
    condition: C
    data:
    - datasourceUid: InfluxDB_Beeper
      model:
        query: "from(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"topic\"] == \"beeper/audio/level\")\n  |> filter(fn: (r) => r[\"_field\"] == \"level_db\")\n  |> aggregateWindow(every: 5s, fn: mean, createEmpty: false)\n"
      refId: A
      relativeTimeRange:
        from: 60
        to: 0
    - datasourceUid: __expr__
      model:
        expression: A
        reducer: last
        settings:
          mode: dropNN
        type: reduce
      refId: B
      relativeTimeRange:
        from: 60
        to: 0
    - datasourceUid: __expr__
      model:
        conditions:
        - evaluator:
            params:
            - 70
            type: gt
        expression: B
        type: threshold
      refId: C
      relativeTimeRange:
        from: 60
        to: 0
    execErrState: OK
    for: 10s
    labels:
      sensor: Microphone
      severity: critical
    noDataState: OK
    title: PROBLEM - Very Loud Noise
    uid: audio_problem
  # Data Flow Monitoring Alerts
  - annotations:
      description: 'MQTT topic count has dropped below normal levels (currently < 12 topics, normal is 17+). This indicates sensors or publishers are not sending data. Check: 1) MQTT publisher service on Pi, 2) Mosquitto broker topic list: docker exec beeper_mosquitto mosquitto_sub -h localhost -t "beeper/#" -v'
      summary: MQTT pipeline degraded - topic count low
    condition: C
    data:
    - datasourceUid: InfluxDB_Beeper
      model:
        query: "from(bucket: \"sensors\")\n  |> range(start: -3m)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"topic\"] =~ /beeper/)\n  |> group(columns: [\"topic\"])\n  |> count()\n  |> group()\n  |> count()\n"
      refId: A
      relativeTimeRange:
        from: 180
        to: 0
    - datasourceUid: __expr__
      model:
        conditions:
        - evaluator:
            params:
            - 12
            type: lt
          operator:
            type: and
          query:
            params:
            - A
          reducer:
            params: []
            type: last
          type: query
        type: classic_conditions
      refId: C
      relativeTimeRange:
        from: 180
        to: 0
    execErrState: Alerting
    for: 3m
    labels:
      component: data_pipeline
      severity: warning
    noDataState: Alerting
    title: MQTT Pipeline Degraded
    uid: mqtt_pipeline_degraded
- folder: Beeper Keeper
  interval: 1m
  name: Water Level Alerts
  orgId: 1
  rules:
  - annotations:
      description: 'Water level is {{ printf "%.1f" $values.A.Value }}% (threshold: <20%). Refill needed. [View Dashboard](https://YOUR_DOMAIN)'
      summary: Water level is low
    condition: C
    data:
    - datasourceUid: InfluxDB_Beeper
      model:
        query: "from(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"topic\"] == \"beeper/water/tank\")\n  |> filter(fn: (r) => r[\"_field\"] == \"percent_full\")\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n"
      refId: A
      relativeTimeRange:
        from: 300
        to: 0
    - datasourceUid: __expr__
      model:
        conditions:
        - evaluator:
            params:
            - 20
            type: lt
          operator:
            type: and
          query:
            params:
            - A
          reducer:
            params: []
            type: last
          type: query
        type: classic_conditions
      refId: C
      relativeTimeRange:
        from: 300
        to: 0
    execErrState: Error
    for: 5m
    labels:
      sensor: water_level
      severity: warning
    noDataState: NoData
    title: Low Water Level
    uid: water_level_low
  - annotations:
      description: 'Water tank is nearly empty! Current level: {{ printf "%.1f" $values.A.Value }}%. Immediate refill required. [View Dashboard](https://YOUR_DOMAIN)'
      summary: Water tank nearly empty
    condition: C
    data:
    - datasourceUid: InfluxDB_Beeper
      model:
        query: "from(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"topic\"] == \"beeper/water/tank\")\n  |> filter(fn: (r) => r[\"_field\"] == \"percent_full\")\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n"
      refId: A
      relativeTimeRange:
        from: 300
        to: 0
    - datasourceUid: __expr__
      model:
        conditions:
        - evaluator:
            params:
            - 5
            type: lt
          operator:
            type: and
          query:
            params:
            - A
          reducer:
            params: []
            type: last
          type: query
        type: classic_conditions
      refId: C
      relativeTimeRange:
        from: 300
        to: 0
    execErrState: Alerting
    for: 2m
    labels:
      sensor: water_level
      severity: critical
    noDataState: NoData
    title: Water Tank Empty
    uid: water_tank_empty
  - annotations:
      description: 'ESP32 water sensor has not reported data in the last 10 minutes. Check sensor power and connectivity. [View Dashboard](https://YOUR_DOMAIN)'
      summary: Water sensor offline
    condition: C
    data:
    - datasourceUid: InfluxDB_Beeper
      model:
        query: "from(bucket: \"sensors\")\n  |> range(start: -10m)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"topic\"] == \"beeper/water/tank\")\n  |> filter(fn: (r) => r[\"_field\"] == \"percent_full\")\n  |> count()\n"
      refId: A
      relativeTimeRange:
        from: 600
        to: 0
    - datasourceUid: __expr__
      model:
        conditions:
        - evaluator:
            params:
            - 1
            type: lt
          operator:
            type: and
          query:
            params:
            - A
          reducer:
            params: []
            type: last
          type: query
        type: classic_conditions
      refId: C
      relativeTimeRange:
        from: 600
        to: 0
    execErrState: Alerting
    for: 10m
    labels:
      component: sensors
      sensor: water_level
      severity: warning
    noDataState: Alerting
    title: Water Sensor Offline
    uid: water_sensor_offline
  - annotations:
      description: 'Water level sensor is reporting errors. Check sensor connection and position. [View Dashboard](https://YOUR_DOMAIN)'
      summary: Water sensor malfunction
    condition: C
    data:
    - datasourceUid: InfluxDB_Beeper
      model:
        query: "from(bucket: \"sensors\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"topic\"] == \"beeper/water/status\")\n  |> filter(fn: (r) => r[\"_field\"] == \"status\")\n  |> map(fn: (r) => ({\n      r with\n      _value: if r._value == \"online\" then 1.0\n              else if r._value == \"error\" then 0.0\n              else -1.0\n    }))\n  |> filter(fn: (r) => r[\"_value\"] == 0.0)\n  |> count()\n"
      refId: A
      relativeTimeRange:
        from: 300
        to: 0
    - datasourceUid: __expr__
      model:
        conditions:
        - evaluator:
            params:
            - 1
            type: gt
          operator:
            type: and
          query:
            params:
            - A
          reducer:
            params: []
            type: last
          type: query
        type: classic_conditions
      refId: C
      relativeTimeRange:
        from: 300
        to: 0
    execErrState: Error
    for: 5m
    labels:
      component: sensors
      sensor: water_level
      severity: warning
    noDataState: NoData
    title: Water Sensor Error
    uid: water_sensor_error